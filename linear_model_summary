def adj_R2(X_train,y_train,reg):
    """
    Input : (X_train,y_train,Regression Model)
    Output: gives the adjusted R2 of the linear model
    """
    r2=reg.score(x,y)
    n = x.shape[0]
    p = x.shape[1]
    adjusted_r2 = 1-((1-r2)*(n-1)/(n-p-1))
    return adjusted_r2

def linearmodel_summary(x, y, reg, col):
    """
    Input: x = X_train, y = y_train, reg = model regressor, col = column names on X_Train
    Output: R2 , Adjusted R2, Feature Coefficients, Feature p-values
    Package imports:
    from sklearn.linear_model import LinearRegression
    from sklearn.feature_selection import f_regression
    """
    r2 = reg.score(x, y)
    n = x.shape[0]
    p = x.shape[1]
    adjusted_r2 = 1 - ((1 - r2) * (n - 1) / (n - p - 1))

    p_values = f_regression(x, y)[1].round(3)
    reg_coef = reg.coef_
    features = col.values

    return print(
        pd.DataFrame(np.array([[r2, adjusted_r2]]),
                     columns=["R2", "Adjusted R2"]), "\n\n",
        pd.DataFrame(data=np.array([
            features,
            reg_coef,
            p_values,
        ]).T,
                     columns=["Features", "Coefficients", 'p-values']))
